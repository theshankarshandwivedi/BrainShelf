// src/pages/ProfilePage.jsx
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import apiService from '../services/api';
import ProjectCard from '../components/ProjectCard';
import '../styles/ProfilePage.css';

const ProfilePage = () => {
  const { username } = useParams();
  const { user: currentUser } = useAuth();
  const navigate = useNavigate();
  
  console.log('ProfilePage component mounted with:', { username, currentUser });
  
  // If no username in params and user is authenticated, redirect to their profile
  React.useEffect(() => {
    console.log('ProfilePage redirect effect:', { username, currentUserUsername: currentUser?.username });
    if (!username && currentUser?.username) {
      console.log('Redirecting to:', `/profile/${currentUser.username}`);
      navigate(`/profile/${currentUser.username}`, { replace: true });
    }
  }, [username, currentUser, navigate]);

  // For now, let's just render a simple test component
  return (
    <div className="profile-page">
      <div className="profile-container">
        <h1>Profile Page Test</h1>
        <p>Username from params: {username || 'None'}</p>
        <p>Current user: {currentUser?.username || 'Not logged in'}</p>
        <p>This is a test to see if routing works</p>
      </div>
    </div>
  );
};

export default ProfilePage;
    <div className="profile-page">
      <div className="profile-container">
        {/* Profile Header */}
        <div className="profile-header">
          <div className="profile-avatar">
            <img 
              src={previewAvatar || user.avatar || '/default-avatar.png'} 
              alt={user.name}
              onError={(e) => {
                e.target.src = `https://ui-avatars.com/api/?name=${encodeURIComponent(user.name)}&background=007bff&color=fff&size=120`;
              }}
            />
            {isEditing && isOwnProfile && (
              <div className="avatar-upload">
                <input
                  type="file"
                  id="avatar-upload"
                  accept="image/*"
                  onChange={handleAvatarChange}
                  style={{ display: 'none' }}
                />
                <label htmlFor="avatar-upload" className="avatar-upload-btn">
                  📷 Change Photo
                </label>
              </div>
            )}
          </div>
          <div className="profile-header-info">
            <h1 className="profile-name">{user.name}</h1>
            <p className="profile-username">@{user.username}</p>
            {user.bio && <p className="profile-bio">{user.bio}</p>}
            {user.location && (
              <p className="profile-location">
                <i className="icon-location"></i> {user.location}
              </p>
            )}
            <div className="profile-stats">
              <div className="stat">
                <span className="stat-number">{userProjects.length}</span>
                <span className="stat-label">Projects</span>
              </div>
              <div className="stat">
                <span className="stat-number">{user.followers || 0}</span>
                <span className="stat-label">Followers</span>
              </div>
              <div className="stat">
                <span className="stat-number">{user.following || 0}</span>
                <span className="stat-label">Following</span>
              </div>
            </div>
            {isOwnProfile && (
              <div className="profile-actions">
                {!isEditing ? (
                  <button className="btn btn-primary" onClick={handleEdit}>
                    Edit Profile
                  </button>
                ) : (
                  <div className="edit-actions">
                    <button 
                      className="btn btn-success" 
                      onClick={handleSaveProfile}
                      disabled={isUploading}
                    >
                      {isUploading ? 'Saving...' : 'Save Changes'}
                    </button>
                    <button 
                      className="btn btn-secondary" 
                      onClick={handleCancelEdit}
                      disabled={isUploading}
                    >
                      Cancel
                    </button>
                  </div>
                )}
              </div>
            )}
          </div>
        </div>

        {/* Section Navigation */}
        <div className="profile-navigation">
          <button 
            className={`nav-btn ${activeSection === 'basic' ? 'active' : ''}`}
            onClick={() => setActiveSection('basic')}
          >
            Basic Info
          </button>
          <button 
            className={`nav-btn ${activeSection === 'advanced' ? 'active' : ''}`}
            onClick={() => setActiveSection('advanced')}
          >
            Advanced Info
          </button>
          <button 
            className={`nav-btn ${activeSection === 'projects' ? 'active' : ''}`}
            onClick={() => setActiveSection('projects')}
          >
            Projects ({userProjects.length})
          </button>
          <button 
            className={`nav-btn ${activeSection === 'education' ? 'active' : ''}`}
            onClick={() => setActiveSection('education')}
          >
            Education
          </button>
          <button 
            className={`nav-btn ${activeSection === 'social' ? 'active' : ''}`}
            onClick={() => setActiveSection('social')}
          >
            Social Links
          </button>
          <button 
            className={`nav-btn ${activeSection === 'dashboard' ? 'active' : ''}`}
            onClick={() => setActiveSection('dashboard')}
          >
            Dashboard
          </button>
        </div>

        {/* Section Content */}
        <div className="profile-content">
          {/* Basic Information Section */}
          {activeSection === 'basic' && (
            <div className="profile-section">
              <h2>Basic Information</h2>
              <div className="info-grid">
                <div className="info-item">
                  <label>Full Name</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.name}
                      onChange={(e) => handleInputChange('name', e.target.value)}
                      className="form-input"
                    />
                  ) : (
                    <p>{user.name}</p>
                  )}
                </div>
                <div className="info-item">
                  <label>Email</label>
                  {isEditing ? (
                    <input
                      type="email"
                      value={editFormData.email}
                      onChange={(e) => handleInputChange('email', e.target.value)}
                      className="form-input"
                    />
                  ) : (
                    <p>{user.email}</p>
                  )}
                </div>
                <div className="info-item">
                  <label>Username</label>
                  <p>@{user.username}</p>
                </div>
                <div className="info-item">
                  <label>Member Since</label>
                  <p>{new Date(user.createdAt).toLocaleDateString()}</p>
                </div>
                <div className="info-item full-width">
                  <label>Bio</label>
                  {isEditing ? (
                    <textarea
                      value={editFormData.bio}
                      onChange={(e) => handleInputChange('bio', e.target.value)}
                      className="form-textarea"
                      placeholder="Tell us about yourself..."
                    />
                  ) : (
                    <p>{user.bio || 'No bio available'}</p>
                  )}
                </div>
                <div className="info-item">
                  <label>Location</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.location}
                      onChange={(e) => handleInputChange('location', e.target.value)}
                      className="form-input"
                      placeholder="City, Country"
                    />
                  ) : (
                    <p>{user.location || 'Not specified'}</p>
                  )}
                </div>
                <div className="info-item">
                  <label>Website</label>
                  {isEditing ? (
                    <input
                      type="url"
                      value={editFormData.website}
                      onChange={(e) => handleInputChange('website', e.target.value)}
                      className="form-input"
                      placeholder="https://your-website.com"
                    />
                  ) : (
                    <p>
                      {user.website ? (
                        <a href={user.website} target="_blank" rel="noopener noreferrer">
                          {user.website}
                        </a>
                      ) : (
                        'Not specified'
                      )}
                    </p>
                  )}
                </div>
                <div className="info-item">
                  <label>Favorite Technologies</label>
                  <div className="tech-tags">
                    {userProjects.length > 0 ? (
                      // Extract unique technologies from project names and descriptions
                      Array.from(new Set(
                        userProjects.flatMap(project => {
                          const text = `${project.name} ${project.description}`.toLowerCase();
                          const techs = [];
                          if (text.includes('react')) techs.push('React');
                          if (text.includes('node') || text.includes('nodejs')) techs.push('Node.js');
                          if (text.includes('javascript') || text.includes('js')) techs.push('JavaScript');
                          if (text.includes('python')) techs.push('Python');
                          if (text.includes('html')) techs.push('HTML');
                          if (text.includes('css')) techs.push('CSS');
                          if (text.includes('mongodb') || text.includes('mongo')) techs.push('MongoDB');
                          if (text.includes('express')) techs.push('Express');
                          if (text.includes('vue')) techs.push('Vue');
                          if (text.includes('angular')) techs.push('Angular');
                          if (text.includes('typescript')) techs.push('TypeScript');
                          if (text.includes('java')) techs.push('Java');
                          if (text.includes('c++') || text.includes('cpp')) techs.push('C++');
                          if (text.includes('c#') || text.includes('csharp')) techs.push('C#');
                          if (text.includes('php')) techs.push('PHP');
                          return techs;
                        })
                      )).slice(0, 8).map((tech, index) => (
                        <span key={index} className="tech-tag">{tech}</span>
                      ))
                    ) : (
                      <p>Upload projects to see your favorite technologies!</p>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Advanced Information Section */}
          {activeSection === 'advanced' && (
            <div className="profile-section">
              <h2>Advanced Information</h2>
              <div className="info-grid">
                <div className="info-item full-width">
                  <label>Project Analytics</label>
                  <div className="project-analytics">
                    <div className="analytics-grid">
                      <div className="analytics-item">
                        <span className="analytics-number">{userProjects.length}</span>
                        <span className="analytics-label">Projects Created</span>
                      </div>
                      <div className="analytics-item">
                        <span className="analytics-number">
                          {userProjects.reduce((sum, project) => sum + (project.views || 0), 0)}
                        </span>
                        <span className="analytics-label">Total Project Views</span>
                      </div>
                      <div className="analytics-item">
                        <span className="analytics-number">
                          {Math.round((userProjects.reduce((sum, project) => sum + (project.averageRating || 0), 0) / (userProjects.length || 1)) * 10) / 10}
                        </span>
                        <span className="analytics-label">Average Rating</span>
                      </div>
                      <div className="analytics-item">
                        <span className="analytics-number">
                          {userProjects.reduce((sum, project) => sum + (project.totalRatings || 0), 0)}
                        </span>
                        <span className="analytics-label">Total Ratings</span>
                      </div>
                    </div>
                  </div>
                </div>
                <div className="info-item full-width">
                  <label>Skills</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.skills.join(', ')}
                      onChange={(e) => handleSkillsChange(e.target.value)}
                      className="form-input"
                      placeholder="JavaScript, React, Node.js, Python..."
                    />
                  ) : (
                    <div className="skills-container">
                      {user.skills && user.skills.length > 0 ? (
                        user.skills.map((skill, index) => (
                          <span key={index} className="skill-tag">{skill}</span>
                        ))
                      ) : (
                        <p>No skills listed</p>
                      )}
                    </div>
                  )}
                </div>
                <div className="info-item full-width">
                  <label>Experience</label>
                  {isEditing ? (
                    <div className="experience-edit">
                      {editFormData.experience && editFormData.experience.length > 0 ? (
                        editFormData.experience.map((exp, index) => (
                          <div key={index} className="experience-edit-item">
                            <div className="experience-edit-grid">
                              <input
                                type="text"
                                placeholder="Position"
                                value={exp.position}
                                onChange={(e) => handleUpdateExperience(index, 'position', e.target.value)}
                                className="form-input"
                              />
                              <input
                                type="text"
                                placeholder="Company"
                                value={exp.company}
                                onChange={(e) => handleUpdateExperience(index, 'company', e.target.value)}
                                className="form-input"
                              />
                              <input
                                type="date"
                                placeholder="Start Date"
                                value={exp.startDate}
                                onChange={(e) => handleUpdateExperience(index, 'startDate', e.target.value)}
                                className="form-input"
                              />
                              <div className="end-date-container">
                                <input
                                  type="date"
                                  placeholder="End Date"
                                  value={exp.endDate}
                                  onChange={(e) => handleUpdateExperience(index, 'endDate', e.target.value)}
                                  className="form-input"
                                  disabled={exp.current}
                                />
                                <label className="checkbox-label">
                                  <input
                                    type="checkbox"
                                    checked={exp.current}
                                    onChange={(e) => handleUpdateExperience(index, 'current', e.target.checked)}
                                  />
                                  Current Position
                                </label>
                              </div>
                              <textarea
                                placeholder="Job Description"
                                value={exp.description}
                                onChange={(e) => handleUpdateExperience(index, 'description', e.target.value)}
                                className="form-textarea experience-description"
                              />
                            </div>
                            <button
                              type="button"
                              onClick={() => handleRemoveExperience(index)}
                              className="btn btn-danger remove-btn"
                            >
                              Remove
                            </button>
                          </div>
                        ))
                      ) : (
                        <p>No experience added yet</p>
                      )}
                      <button
                        type="button"
                        onClick={handleAddExperience}
                        className="btn btn-primary add-btn"
                      >
                        + Add Experience
                      </button>
                    </div>
                  ) : (
                    user.experience && user.experience.length > 0 ? (
                      <div className="experience-list">
                        {user.experience.map((exp, index) => (
                          <div key={index} className="experience-item">
                            <h4>{exp.position} at {exp.company}</h4>
                            <p className="experience-duration">{exp.startDate} - {exp.endDate || 'Present'}</p>
                            <p>{exp.description}</p>
                          </div>
                        ))}
                      </div>
                    ) : (
                      <p>No experience listed</p>
                    )
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Projects Section */}
          {activeSection === 'projects' && (
            <div className="profile-section">
              <h2>Projects</h2>
              {userProjects.length > 0 ? (
                <div className="projects-grid">
                  {userProjects.map((project) => (
                    <ProjectCard key={project._id} project={project} />
                  ))}
                </div>
              ) : (
                <div className="no-projects">
                  <p>No projects found</p>
                  {isOwnProfile && (
                    <button 
                      className="btn btn-primary"
                      onClick={() => navigate('/upload')}
                    >
                      Upload Your First Project
                    </button>
                  )}
                </div>
              )}
            </div>
          )}

          {/* Education Section */}
          {activeSection === 'education' && (
            <div className="profile-section">
              <h2>Education</h2>
              <div className="info-grid">
                <div className="info-item">
                  <label>College/University</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.education.college}
                      onChange={(e) => handleInputChange('education.college', e.target.value)}
                      className="form-input"
                    />
                  ) : (
                    <p>{user.education?.college || 'Not specified'}</p>
                  )}
                </div>
                <div className="info-item">
                  <label>Graduation Year</label>
                  {isEditing ? (
                    <input
                      type="number"
                      value={editFormData.education.year}
                      onChange={(e) => handleInputChange('education.year', e.target.value)}
                      className="form-input"
                    />
                  ) : (
                    <p>{user.education?.year || 'Not specified'}</p>
                  )}
                </div>
                <div className="info-item">
                  <label>Degree</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.education.degree}
                      onChange={(e) => handleInputChange('education.degree', e.target.value)}
                      className="form-input"
                      placeholder="Bachelor's, Master's, PhD..."
                    />
                  ) : (
                    <p>{user.education?.degree || 'Not specified'}</p>
                  )}
                </div>
                <div className="info-item">
                  <label>Field of Study</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.education.field}
                      onChange={(e) => handleInputChange('education.field', e.target.value)}
                      className="form-input"
                      placeholder="Computer Science, Engineering..."
                    />
                  ) : (
                    <p>{user.education?.field || 'Not specified'}</p>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Social Links Section */}
          {activeSection === 'social' && (
            <div className="profile-section">
              <h2>Social Links</h2>
              <div className="info-grid">
                <div className="info-item">
                  <label>GitHub</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.github}
                      onChange={(e) => handleInputChange('github', e.target.value)}
                      className="form-input"
                      placeholder="https://github.com/username"
                    />
                  ) : (
                    <p>
                      {user.github ? (
                        <a href={user.github} target="_blank" rel="noopener noreferrer">
                          {user.github}
                        </a>
                      ) : (
                        'Not connected'
                      )}
                    </p>
                  )}
                </div>
                <div className="info-item">
                  <label>LinkedIn</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.linkedin}
                      onChange={(e) => handleInputChange('linkedin', e.target.value)}
                      className="form-input"
                      placeholder="https://linkedin.com/in/username"
                    />
                  ) : (
                    <p>
                      {user.linkedin ? (
                        <a href={user.linkedin} target="_blank" rel="noopener noreferrer">
                          {user.linkedin}
                        </a>
                      ) : (
                        'Not connected'
                      )}
                    </p>
                  )}
                </div>
                <div className="info-item">
                  <label>Twitter</label>
                  {isEditing ? (
                    <input
                      type="text"
                      value={editFormData.twitter}
                      onChange={(e) => handleInputChange('twitter', e.target.value)}
                      className="form-input"
                      placeholder="https://twitter.com/username"
                    />
                  ) : (
                    <p>
                      {user.twitter ? (
                        <a href={user.twitter} target="_blank" rel="noopener noreferrer">
                          {user.twitter}
                        </a>
                      ) : (
                        'Not connected'
                      )}
                    </p>
                  )}
                </div>
              </div>
            </div>
          )}

          {/* Dashboard Section */}
          {activeSection === 'dashboard' && (
            <div className="profile-section">
              <h2>Dashboard</h2>
              <div className="dashboard-grid">
                <div className="dashboard-card">
                  <div className="dashboard-card-header">
                    <h3>📊 Project Statistics</h3>
                  </div>
                  <div className="dashboard-stats">
                    <div className="stat-item">
                      <span className="stat-value">{userProjects.length}</span>
                      <span className="stat-desc">Total Projects</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-value">
                        {userProjects.reduce((sum, project) => sum + (project.views || 0), 0)}
                      </span>
                      <span className="stat-desc">Total Views</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-value">
                        {userProjects.reduce((sum, project) => sum + (project.likes || 0), 0)}
                      </span>
                      <span className="stat-desc">Total Likes</span>
                    </div>
                    <div className="stat-item">
                      <span className="stat-value">
                        {userProjects.reduce((sum, project) => sum + (project.averageRating || 0), 0) / (userProjects.length || 1)}
                      </span>
                      <span className="stat-desc">Avg Rating</span>
                    </div>
                  </div>
                </div>

                <div className="dashboard-card">
                  <div className="dashboard-card-header">
                    <h3>🏆 Achievements</h3>
                  </div>
                  <div className="achievements">
                    {userProjects.length >= 1 && (
                      <div className="achievement-badge">
                        <span className="badge-icon">🚀</span>
                        <span className="badge-text">First Project</span>
                      </div>
                    )}
                    {userProjects.length >= 5 && (
                      <div className="achievement-badge">
                        <span className="badge-icon">📚</span>
                        <span className="badge-text">5 Projects</span>
                      </div>
                    )}
                    {userProjects.length >= 10 && (
                      <div className="achievement-badge">
                        <span className="badge-icon">🌟</span>
                        <span className="badge-text">10 Projects</span>
                      </div>
                    )}
                    {userProjects.some(p => (p.views || 0) > 100) && (
                      <div className="achievement-badge">
                        <span className="badge-icon">👀</span>
                        <span className="badge-text">100+ Views</span>
                      </div>
                    )}
                    {userProjects.some(p => (p.averageRating || 0) >= 4.5) && (
                      <div className="achievement-badge">
                        <span className="badge-icon">⭐</span>
                        <span className="badge-text">High Rated</span>
                      </div>
                    )}
                    {(!userProjects.length || 
                      (!userProjects.some(p => (p.views || 0) > 100) && 
                       !userProjects.some(p => (p.averageRating || 0) >= 4.5) && 
                       userProjects.length < 5)) && (
                      <p className="no-achievements">
                        Keep uploading projects to unlock achievements! 🎯
                      </p>
                    )}
                  </div>
                </div>

                <div className="dashboard-card full-width">
                  <div className="dashboard-card-header">
                    <h3>📈 Recent Activity</h3>
                  </div>
                  <div className="activity-feed">
                    {userProjects.length > 0 ? (
                      userProjects
                        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
                        .slice(0, 5)
                        .map((project) => (
                          <div key={project._id} className="activity-item">
                            <div className="activity-icon">📁</div>
                            <div className="activity-content">
                              <p>
                                <strong>Uploaded project:</strong> {project.title}
                              </p>
                              <span className="activity-time">
                                {new Date(project.createdAt).toLocaleDateString()}
                              </span>
                            </div>
                          </div>
                        ))
                    ) : (
                      <div className="no-activity">
                        <p>No recent activity</p>
                        {isOwnProfile && (
                          <button 
                            className="btn btn-primary"
                            onClick={() => navigate('/upload')}
                          >
                            Upload Your First Project
                          </button>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;
